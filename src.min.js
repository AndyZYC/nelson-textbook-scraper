// Nelson textbook scraper
// By jaihysc
// You acknowledge to use this at your own risk, creator (jaihysc) is not responsible for any consequences or legal repercussions
// It is your responsibility to abide by the laws of your country of residence when using this

function makeHttpObject(){try{return new XMLHttpRequest()}catch(error){}
try{return new ActiveXObject("Msxml2.XMLHTTP")}catch(error){}
try{return new ActiveXObject("Microsoft.XMLHTTP")}catch(error){}
throw new Error("Could not create HTTP request object.")}
function pdf_exists(url){return new Promise(function(resolve){try{let request=makeHttpObject();request.open("GET",url,!0);request.send(null);request.onreadystatechange=function(){if(request.readyState==4)
if(request.responseText.includes("Error 404--Not Found"))
resolve(!1);else resolve(!0)}}catch(error){resolve(!1)}})}
function gen_url(base_url,unit,chapter,section,ending){let chapter_str=String(chapter);chapter_str=chapter_str.padStart(2,'0');let url=base_url;if(unit){url+="_u"+String(unit)}else{if(chapter)
url+="_c"+chapter_str;if(section)
url+="_"+chapter+"_"+section}
if(ending)
url+=ending;url+=".pdf";return url}
async function download_pdf(url,validate_url,file_name){if(validate_url&&!await pdf_exists(url))
return;console.log("Downloading "+url+" as "+file_name+".pdf")
let link=document.createElement('a');link.href=url;link.download=file_name+'.pdf';link.dispatchEvent(new MouseEvent('click'));await new Promise(resolve=>setTimeout(resolve,100))}
{const base_url=prompt("Enter the url of the textbook\nFrom the beginning to first _ at the end\nExample: http://k12resources.nelson.com/science/1234567890/student/documents/attachments/chem12");let unit=1;let chapter=1;let section=1;console.log("Beginning PDF download...")
await download_pdf(gen_url(base_url,undefined,undefined,undefined,"_fm"),!0,"contents");while(await pdf_exists(gen_url(base_url,undefined,chapter,section))){console.log("Downloading chapter "+chapter+"...")
await download_pdf(gen_url(base_url,undefined,chapter,undefined,"_open"),!0,chapter+"-open");while(await pdf_exists(gen_url(base_url,undefined,chapter,section))){await download_pdf(gen_url(base_url,undefined,chapter,section),!1,chapter+"-"+section);section++}
await download_pdf(gen_url(base_url,undefined,chapter,undefined,"_inv"),!0,chapter+"-investigation");await download_pdf(gen_url(base_url,undefined,chapter,undefined,"_summary"),!0,chapter+"-summary");await download_pdf(gen_url(base_url,undefined,chapter,undefined,"_sq"),!0,chapter+"-self_quiz");await download_pdf(gen_url(base_url,undefined,chapter,undefined,"_review"),!0,chapter+"-review");section=1;chapter++}
while(await pdf_exists(gen_url(base_url,unit,undefined,undefined,"_open"))){console.log("Downloading unit "+unit+"...")
await download_pdf(gen_url(base_url,unit,undefined,undefined,"_open"),!1,"u-"+unit+"-open");await download_pdf(gen_url(base_url,unit,undefined,undefined,"_ut"),!0,"u-"+unit+"-tasks");await download_pdf(gen_url(base_url,unit,undefined,undefined,"_sq"),!0,"u-"+unit+"-self_quiz");await download_pdf(gen_url(base_url,unit,undefined,undefined,"_review"),!0,"u-"+unit+"-review");unit++}
let letter;let appendex_index=0;while(await pdf_exists(gen_url(base_url,undefined,undefined,undefined,"_app_"+(letter=String.fromCharCode(65+appendex_index).toLowerCase())))){await download_pdf(gen_url(base_url,undefined,undefined,undefined,"_app_"+letter),!1,"appendix_"+letter);appendex_index++}
await download_pdf(gen_url(base_url,undefined,undefined,undefined,"_glossary"),!0,"glossary");await download_pdf(gen_url(base_url,undefined,undefined,undefined,"_index"),!0,"index");await download_pdf(gen_url(base_url,undefined,undefined,undefined,"_credits"),!0,"credits");console.log("---------- PDF download complete")}